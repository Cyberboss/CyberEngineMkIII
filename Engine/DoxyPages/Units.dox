/*!

@page units Units
@tableofcontents

@section intro Introduction

A Unit is a conglomeration of files that, together, form an application executable by the engine or another Unit. A unit contains three Main parts.
- A shared library compiled against CyberEngineMkII headers.
- A set of readonly data files
- A translation database

@section file_layout File Layout

The engine's base directory layout goes as follows for Windows and Linux

- App/
	- bin/
		- CyberEngineMkII(.exe)
			- The engine's executable
		- (lib)steam_api64.(dll/so)
			- Needed for the engine's Steam interface
		- Other CyberEngine Tools you choose to distribute
	- Resources/
		- Shaders.CYB
			- Shaders used by the renderrer
		- Translations.CYB
			- Translations for messages the engine can show the user
	- Licenses/
		- Contains licensing information for static libraries linked into the CyberEngine executable

And as follows for OS X systems

- App.app/
	- Contents/
		- MacOS/
			- CyberEngineMkII
			- libsteam_api.dylib
		- Resources/
			- Shaders.CYB
			- Translations.CYB
		- Licenses/
		- Info.plist
		- Pkginfo

CyberEngineMkII will depend on the operating system to have OpenAL and OpenGL drivers installed. On Linux it also depends on having a X server based Window system for graphical applications 

A Unit's directory layout should be as follows on top of the base layout. Intuitively, the unit cannot be named "CyberEngineMkII"

Windows and Linux:

- App/
	- bin/
		- (lib)UnitName.(dll/so)
			- The unit's shared library
	- Resources/
		- UnitName
			- Resource %CYB files your unit uses
			- Translations.CYB
				- Translations for any user visible text
	- Licenses/
		- UnitName
			- Licenses your Unit may need

OSX:
	
- App.app/
	- Contents/
		- MacOS/
			- libUnitName.dylib
		- Resources/
			- UnitName
				- ...
				- Translations.CYB
		- Licenses/
			- UnitName
				- ...

@section compiling Compiling

The only requirements to have a shared library be a usable unit is to define a C++ class named %Application, have it publically inherit from CYB::Application, implement CYB::Application::GetUnitParameters and at least one of CYB::Application::Run, CYB::Application::DedicatedServer, or CYB::Application::Invoke. Then a translation unit which can see that definition must include ApplicationInitializer.h. This will handle exporting the necessary symbols to have your Unit be useable.

All units must be compiled for x86_64 architecture

In addition, Windows units must compile with the cl flag /EHa so that access violation errors that your unit causes can be properly handled by the engine.

Aside from that a unit can be compiled with any other flags a developer desires. Just be sure to have the DEBUG definition defined when using the debug executable and PROFILING defined when using the profiling executable.

@section units_sa See Also
@ref resources
@ref localization
*/